{
  "c:alias(sphinx.domains.c.CAliasObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-alias",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:alias",
    "is_markdown": true,
    "description": [
      "Insert one or more alias declarations. Each entity can be specified",
      "as they can in the [c:any](https://www.sphinx-doc.org/en/master/_sources/usage/restructuredtext/domains.rst.txt#None) role.",
      "",
      "For example:",
      "",
      "```",
      ".. c:var:: int data",
      ".. c:function:: int f(double k)",
      "",
      ".. c:alias:: data",
      "             f",
      "```",
      "",
      "becomes",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "Options",
      "",
      "Insert nested declarations as well, up to the total depth given.",
      "Use 0 for infinite depth and 1 for just the mentioned declaration.",
      "Defaults to 1.",
      "",
      "",
      "",
      "",
      "",
      "Skip the mentioned declarations and only render nested declarations.",
      "Requires `maxdepth` either 0 or at least 2."
    ],
    "options": {}
  },
  "c:enum(sphinx.domains.c.CEnumObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-enum",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:enum",
    "is_markdown": true,
    "description": [
      "Describes a C enum."
    ],
    "options": {}
  },
  "c:enumerator(sphinx.domains.c.CEnumeratorObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-enumerator",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:enumerator",
    "is_markdown": true,
    "description": [
      "Describes a C enumerator."
    ],
    "options": {}
  },
  "c:function(sphinx.domains.c.CFunctionObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-function",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:function",
    "is_markdown": true,
    "description": [
      "Describes a C function. The signature should be given as in C, e.g.:",
      "",
      "```",
      ".. c:function:: PyObject *PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)",
      "```",
      "",
      "Note that you don't have to backslash-escape asterisks in the signature, as",
      "it is not parsed by the reST inliner.",
      "",
      "In the description of a function you can use the following info fields",
      "(see also [info-field-lists](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#info-field-lists)).",
      "- `param`, `parameter`, `arg`, `argument`,",
      "Description of a parameter.",
      "- `type`: Type of a parameter,",
      "written as if passed to the [c:expr](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#role-c-expr) role.",
      "- `returns`, `return`: Description of the return value.",
      "- `rtype`: Return type,",
      "written as if passed to the [c:expr](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#role-c-expr) role.",
      "- `retval`, `retvals`: An alternative to `returns` for describing",
      "the result of the function.",
      "",
      "",
      "",
      "For example:",
      "",
      "```",
      ".. c:function:: PyObject *PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)",
      "",
      "   :param type: description of the first parameter.",
      "   :param nitems: description of the second parameter.",
      "   :returns: a result.",
      "   :retval NULL: under some conditions.",
      "   :retval NULL: under some other conditions as well.",
      "```",
      "",
      "which renders as",
      "",
      "** for some editors (e.g., vim) to stop bold-highlighting the source",
      "| | |",
      "|-|-|",
      "| param type | description of the first parameter. |",
      "| param nitems | description of the second parameter. |",
      "| returns | a result. |",
      "| retval NULL | under some conditions. |",
      "| retval NULL | under some other conditions as well. |"
    ],
    "options": {}
  },
  "c:macro(sphinx.domains.c.CMacroObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-macro",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:macro",
    "is_markdown": true,
    "description": [
      "Describes a C macro, i.e., a C-language `#define`, without the replacement",
      "text.",
      "",
      "In the description of a macro you can use the same info fields as for the",
      "[c:function](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-function) directive."
    ],
    "options": {}
  },
  "c:member(sphinx.domains.c.CMemberObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-member",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:member",
    "is_markdown": true,
    "description": [
      "Describes a C struct member or variable. Example signature:",
      "",
      "```",
      ".. c:member:: PyObject *PyTypeObject.tp_bases",
      "```",
      "",
      "The difference between the two directives is only cosmetic."
    ],
    "options": {}
  },
  "c:namespace(sphinx.domains.c.CNamespaceObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-namespace",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:namespace",
    "is_markdown": true,
    "description": [
      "Changes the current scope for the subsequent objects to the given scope, and",
      "resets the namespace directive stack. Note that nested scopes can be",
      "specified by separating with a dot, e.g.:",
      "",
      "```",
      ".. c:namespace:: Namespace1.Namespace2.SomeStruct.AnInnerStruct",
      "```",
      "",
      "All subsequent objects will be defined as if their name were declared with",
      "the scope prepended. The subsequent cross-references will be searched for",
      "starting in the current scope.",
      "",
      "Using `NULL` or `0` as the scope will change to global scope."
    ],
    "options": {}
  },
  "c:namespace-pop(sphinx.domains.c.CNamespacePopObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-namespace-pop",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:namespace-pop",
    "is_markdown": true,
    "description": [
      "Undo the previous `c:namespace-push` directive (not just pop a scope).",
      "For example, after:",
      "",
      "```",
      ".. c:namespace:: A.B",
      "",
      ".. c:namespace-push:: C.D",
      "",
      ".. c:namespace-pop::",
      "```",
      "",
      "the current scope will be `A.B` (not `A.B.C`).",
      "",
      "If no previous `c:namespace-push` directive has been used, but only a",
      "`c:namespace` directive, then the current scope will be reset to global",
      "scope.  That is, `.. c:namespace:: A.B` is equivalent to:",
      "",
      "```",
      ".. c:namespace:: NULL",
      "",
      ".. c:namespace-push:: A.B",
      "```"
    ],
    "options": {}
  },
  "c:namespace-push(sphinx.domains.c.CNamespacePushObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-namespace-push",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:namespace-push",
    "is_markdown": true,
    "description": [
      "Change the scope relatively to the current scope. For example, after:",
      "",
      "```",
      ".. c:namespace:: A.B",
      "",
      ".. c:namespace-push:: C.D",
      "```",
      "",
      "the current scope will be `A.B.C.D`."
    ],
    "options": {}
  },
  "c:struct(sphinx.domains.c.CStructObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-struct",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:struct",
    "is_markdown": true,
    "description": [
      "Describes a C struct."
    ],
    "options": {}
  },
  "c:type(sphinx.domains.c.CTypeObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-type",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:type",
    "is_markdown": true,
    "description": [
      "Describes a C type, either as a typedef, or the alias for an unspecified",
      "type."
    ],
    "options": {}
  },
  "c:union(sphinx.domains.c.CUnionObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-union",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:union",
    "is_markdown": true,
    "description": [
      "Describes a C union."
    ],
    "options": {}
  },
  "c:var(sphinx.domains.c.CMemberObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-c-var",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "c:var",
    "is_markdown": true,
    "description": [
      "Describes a C struct member or variable. Example signature:",
      "",
      "```",
      ".. c:member:: PyObject *PyTypeObject.tp_bases",
      "```",
      "",
      "The difference between the two directives is only cosmetic."
    ],
    "options": {}
  },
  "cpp:alias(sphinx.domains.cpp.CPPAliasObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-alias",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:alias",
    "is_markdown": true,
    "description": [
      "Insert one or more alias declarations. Each entity can be specified",
      "as they can in the [cpp:any](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#role-cpp-any) role.",
      "If the name of a function is given (as opposed to the complete signature),",
      "then all overloads of the function will be listed.",
      "",
      "For example:",
      "",
      "```",
      ".. cpp:alias:: Data::a",
      "               overload_example::C::f",
      "```",
      "",
      "becomes",
      "",
      "",
      "",
      "whereas:",
      "",
      "```",
      ".. cpp:alias:: void overload_example::C::f(double d) const",
      "               void overload_example::C::f(double d)",
      "```",
      "",
      "becomes",
      "",
      "",
      "",
      "",
      "Options",
      "",
      "Insert nested declarations as well, up to the total depth given.",
      "Use 0 for infinite depth and 1 for just the mentioned declaration.",
      "Defaults to 1.",
      "",
      "",
      "",
      "",
      "",
      "Skip the mentioned declarations and only render nested declarations.",
      "Requires `maxdepth` either 0 or at least 2."
    ],
    "options": {}
  },
  "cpp:class(sphinx.domains.cpp.CPPClassObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-class",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:class",
    "is_markdown": true,
    "description": [
      "Describe a class/struct, possibly with specification of inheritance, e.g.,:",
      "",
      "```",
      ".. cpp:class:: MyClass : public MyBase, MyOtherBase",
      "```",
      "",
      "The difference between [cpp:class](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-class) and [cpp:struct](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-struct) is",
      "only cosmetic: the prefix rendered in the output, and the specifier shown",
      "in the index.",
      "",
      "The class can be directly declared inside a nested scope, e.g.,:",
      "",
      "```",
      ".. cpp:class:: OuterScope::MyClass : public MyBase, MyOtherBase",
      "```",
      "",
      "A class template can be declared:",
      "",
      "```",
      ".. cpp:class:: template<typename T, std::size_t N> std::array",
      "```",
      "",
      "or with a line break:",
      "",
      "```",
      ".. cpp:class:: template<typename T, std::size_t N> \\",
      "               std::array",
      "```",
      "",
      "Full and partial template specialisations can be declared:",
      "",
      "```",
      ".. cpp:class:: template<> \\",
      "               std::array<bool, 256>",
      "",
      ".. cpp:class:: template<typename T> \\",
      "               std::array<T, 42>",
      "```"
    ],
    "options": {}
  },
  "cpp:concept(sphinx.domains.cpp.CPPConceptObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-concept",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:concept",
    "is_markdown": true,
    "description": [
      "The support for concepts is experimental. It is based on the",
      "current draft standard and the Concepts Technical Specification.",
      "The features may change as they evolve.",
      "",
      "Describe a concept. It must have exactly 1 template parameter list. The name",
      "may be a nested name. Example:",
      "",
      "```",
      ".. cpp:concept:: template<typename It> std::Iterator",
      "",
      "   Proxy to an element of a notional sequence that can be compared,",
      "   indirected, or incremented.",
      "",
      "   **Notation**",
      "",
      "   .. cpp:var:: It r",
      "",
      "      An lvalue.",
      "",
      "   **Valid Expressions**",
      "",
      "   - :cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable.",
      "   - :cpp:expr:`++r`, with return type :cpp:expr:`It&`, when",
      "     :cpp:expr:`r` is incrementable.",
      "```",
      "",
      "This will render as follows:",
      "",
      "",
      "Proxy to an element of a notional sequence that can be compared,",
      "indirected, or incremented.",
      "",
      "Notation",
      "",
      "",
      "An lvalue.",
      "",
      "",
      "Valid Expressions",
      "- `*r`, when `r` is dereferenceable.",
      "- `++r`, with return type `It&`, when `r`",
      "is incrementable."
    ],
    "options": {}
  },
  "cpp:enum(sphinx.domains.cpp.CPPEnumObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-enum",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:enum",
    "is_markdown": true,
    "description": [
      "Describe a (scoped) enum, possibly with the underlying type specified.  Any",
      "enumerators declared inside an unscoped enum will be declared both in the",
      "enum scope and in the parent scope.  Examples:",
      "",
      "```",
      ".. cpp:enum:: MyEnum",
      "",
      "   An unscoped enum.",
      "",
      ".. cpp:enum:: MySpecificEnum : long",
      "",
      "   An unscoped enum with specified underlying type.",
      "",
      ".. cpp:enum-class:: MyScopedEnum",
      "",
      "   A scoped enum.",
      "",
      ".. cpp:enum-struct:: protected MyScopedVisibilityEnum : std::underlying_type<MySpecificEnum>::type",
      "",
      "   A scoped enum with non-default visibility, and with a specified",
      "   underlying type.",
      "```"
    ],
    "options": {}
  },
  "cpp:enum-class(sphinx.domains.cpp.CPPEnumObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-enum-class",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:enum-class",
    "is_markdown": true,
    "description": [
      "Describe a (scoped) enum, possibly with the underlying type specified.  Any",
      "enumerators declared inside an unscoped enum will be declared both in the",
      "enum scope and in the parent scope.  Examples:",
      "",
      "```",
      ".. cpp:enum:: MyEnum",
      "",
      "   An unscoped enum.",
      "",
      ".. cpp:enum:: MySpecificEnum : long",
      "",
      "   An unscoped enum with specified underlying type.",
      "",
      ".. cpp:enum-class:: MyScopedEnum",
      "",
      "   A scoped enum.",
      "",
      ".. cpp:enum-struct:: protected MyScopedVisibilityEnum : std::underlying_type<MySpecificEnum>::type",
      "",
      "   A scoped enum with non-default visibility, and with a specified",
      "   underlying type.",
      "```"
    ],
    "options": {}
  },
  "cpp:enum-struct(sphinx.domains.cpp.CPPEnumObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-enum-struct",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:enum-struct",
    "is_markdown": true,
    "description": [
      "Describe a (scoped) enum, possibly with the underlying type specified.  Any",
      "enumerators declared inside an unscoped enum will be declared both in the",
      "enum scope and in the parent scope.  Examples:",
      "",
      "```",
      ".. cpp:enum:: MyEnum",
      "",
      "   An unscoped enum.",
      "",
      ".. cpp:enum:: MySpecificEnum : long",
      "",
      "   An unscoped enum with specified underlying type.",
      "",
      ".. cpp:enum-class:: MyScopedEnum",
      "",
      "   A scoped enum.",
      "",
      ".. cpp:enum-struct:: protected MyScopedVisibilityEnum : std::underlying_type<MySpecificEnum>::type",
      "",
      "   A scoped enum with non-default visibility, and with a specified",
      "   underlying type.",
      "```"
    ],
    "options": {}
  },
  "cpp:enumerator(sphinx.domains.cpp.CPPEnumeratorObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-enumerator",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:enumerator",
    "is_markdown": true,
    "description": [
      "Describe an enumerator, optionally with its value defined, e.g.,:",
      "",
      "```",
      ".. cpp:enumerator:: MyEnum::myEnumerator",
      "",
      ".. cpp:enumerator:: MyEnum::myOtherEnumerator = 42",
      "```"
    ],
    "options": {}
  },
  "cpp:function(sphinx.domains.cpp.CPPFunctionObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-function",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:function",
    "is_markdown": true,
    "description": [
      "Describe a function or member function, e.g.,:",
      "",
      "```",
      ".. cpp:function:: bool myMethod(int arg1, std::string arg2)",
      "",
      "   A function with parameters and types.",
      "",
      ".. cpp:function:: bool myMethod(int, double)",
      "",
      "   A function with unnamed parameters.",
      "",
      ".. cpp:function:: const T &MyClass::operator[](std::size_t i) const",
      "",
      "   An overload for the indexing operator.",
      "",
      ".. cpp:function:: operator bool() const",
      "",
      "   A casting operator.",
      "",
      ".. cpp:function:: constexpr void foo(std::string &bar[2]) noexcept",
      "",
      "   A constexpr function.",
      "",
      ".. cpp:function:: MyClass::MyClass(const MyClass&) = default",
      "",
      "   A copy constructor with default implementation.",
      "```",
      "",
      "Function templates can also be described:",
      "",
      "```",
      ".. cpp:function:: template<typename U> \\",
      "                  void print(U &&u)",
      "```",
      "",
      "and function template specialisations:",
      "",
      "```",
      ".. cpp:function:: template<> \\",
      "                  void print(int i)",
      "```"
    ],
    "options": {}
  },
  "cpp:member(sphinx.domains.cpp.CPPMemberObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-member",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:member",
    "is_markdown": true,
    "description": [
      "Describe a variable or member variable, e.g.,:",
      "",
      "```",
      ".. cpp:member:: std::string MyClass::myMember",
      "",
      ".. cpp:var:: std::string MyClass::myOtherMember[N][M]",
      "",
      ".. cpp:member:: int a = 42",
      "```",
      "",
      "Variable templates can also be described:",
      "",
      "```",
      ".. cpp:member:: template<class T> \\",
      "                constexpr T pi = T(3.1415926535897932385)",
      "```"
    ],
    "options": {}
  },
  "cpp:namespace(sphinx.domains.cpp.CPPNamespaceObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-namespace",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:namespace",
    "is_markdown": true,
    "description": [
      "Changes the current scope for the subsequent objects to the given scope, and",
      "resets the namespace directive stack.  Note that the namespace does not need",
      "to correspond to C++ namespaces, but can end in names of classes, e.g.,:",
      "",
      "```",
      ".. cpp:namespace:: Namespace1::Namespace2::SomeClass::AnInnerClass",
      "```",
      "",
      "All subsequent objects will be defined as if their name were declared with",
      "the scope prepended. The subsequent cross-references will be searched for",
      "starting in the current scope.",
      "",
      "Using `NULL`, `0`, or `nullptr` as the scope will change to global",
      "scope.",
      "",
      "A namespace declaration can also be templated, e.g.,:",
      "",
      "```",
      ".. cpp:class:: template<typename T> \\",
      "               std::vector",
      "",
      ".. cpp:namespace:: template<typename T> std::vector",
      "",
      ".. cpp:function:: std::size_t size() const",
      "```",
      "",
      "declares `size` as a member function of the class template",
      "`std::vector`.  Equivalently this could have been declared using:",
      "",
      "```",
      ".. cpp:class:: template<typename T> \\",
      "               std::vector",
      "",
      "   .. cpp:function:: std::size_t size() const",
      "```",
      "",
      "or:",
      "",
      "```",
      ".. cpp:class:: template<typename T> \\",
      "               std::vector",
      "```"
    ],
    "options": {}
  },
  "cpp:namespace-pop(sphinx.domains.cpp.CPPNamespacePopObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-namespace-pop",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:namespace-pop",
    "is_markdown": true,
    "description": [
      "Undo the previous `cpp:namespace-push` directive (not just pop a scope).",
      "For example, after:",
      "",
      "```",
      ".. cpp:namespace:: A::B",
      "",
      ".. cpp:namespace-push:: C::D",
      "",
      ".. cpp:namespace-pop::",
      "```",
      "",
      "the current scope will be `A::B` (not `A::B::C`).",
      "",
      "If no previous `cpp:namespace-push` directive has been used, but only a",
      "`cpp:namespace` directive, then the current scope will be reset to global",
      "scope.  That is, `.. cpp:namespace:: A::B` is equivalent to:",
      "",
      "```",
      ".. cpp:namespace:: nullptr",
      "",
      ".. cpp:namespace-push:: A::B",
      "```"
    ],
    "options": {}
  },
  "cpp:namespace-push(sphinx.domains.cpp.CPPNamespacePushObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-namespace-push",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:namespace-push",
    "is_markdown": true,
    "description": [
      "Change the scope relatively to the current scope. For example, after:",
      "",
      "```",
      ".. cpp:namespace:: A::B",
      "",
      ".. cpp:namespace-push:: C::D",
      "```",
      "",
      "the current scope will be `A::B::C::D`."
    ],
    "options": {}
  },
  "cpp:struct(sphinx.domains.cpp.CPPClassObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-struct",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:struct",
    "is_markdown": true,
    "description": [
      "Describe a class/struct, possibly with specification of inheritance, e.g.,:",
      "",
      "```",
      ".. cpp:class:: MyClass : public MyBase, MyOtherBase",
      "```",
      "",
      "The difference between [cpp:class](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-class) and [cpp:struct](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-struct) is",
      "only cosmetic: the prefix rendered in the output, and the specifier shown",
      "in the index.",
      "",
      "The class can be directly declared inside a nested scope, e.g.,:",
      "",
      "```",
      ".. cpp:class:: OuterScope::MyClass : public MyBase, MyOtherBase",
      "```",
      "",
      "A class template can be declared:",
      "",
      "```",
      ".. cpp:class:: template<typename T, std::size_t N> std::array",
      "```",
      "",
      "or with a line break:",
      "",
      "```",
      ".. cpp:class:: template<typename T, std::size_t N> \\",
      "               std::array",
      "```",
      "",
      "Full and partial template specialisations can be declared:",
      "",
      "```",
      ".. cpp:class:: template<> \\",
      "               std::array<bool, 256>",
      "",
      ".. cpp:class:: template<typename T> \\",
      "               std::array<T, 42>",
      "```"
    ],
    "options": {}
  },
  "cpp:type(sphinx.domains.cpp.CPPTypeObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-type",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:type",
    "is_markdown": true,
    "description": [
      "Describe a type as in a typedef declaration, a type alias declaration, or",
      "simply the name of a type with unspecified type, e.g.,:",
      "",
      "```",
      ".. cpp:type:: std::vector<int> MyList",
      "",
      "   A typedef-like declaration of a type.",
      "",
      ".. cpp:type:: MyContainer::const_iterator",
      "",
      "   Declaration of a type alias with unspecified type.",
      "",
      ".. cpp:type:: MyType = std::unordered_map<int, std::string>",
      "",
      "   Declaration of a type alias.",
      "```",
      "",
      "A type alias can also be templated:",
      "",
      "```",
      ".. cpp:type:: template<typename T> \\",
      "              MyContainer = std::vector<T>",
      "```",
      "",
      "The example are rendered as follows.",
      "",
      "",
      "A typedef-like declaration of a type.",
      "",
      "",
      "",
      "Declaration of a type alias with unspecified type.",
      "",
      "",
      "",
      "Declaration of a type alias."
    ],
    "options": {}
  },
  "cpp:union(sphinx.domains.cpp.CPPUnionObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-union",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:union",
    "is_markdown": true,
    "description": [
      "Describe a union."
    ],
    "options": {}
  },
  "cpp:var(sphinx.domains.cpp.CPPMemberObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-cpp-var",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "cpp:var",
    "is_markdown": true,
    "description": [
      "Describe a variable or member variable, e.g.,:",
      "",
      "```",
      ".. cpp:member:: std::string MyClass::myMember",
      "",
      ".. cpp:var:: std::string MyClass::myOtherMember[N][M]",
      "",
      ".. cpp:member:: int a = 42",
      "```",
      "",
      "Variable templates can also be described:",
      "",
      "```",
      ".. cpp:member:: template<class T> \\",
      "                constexpr T pi = T(3.1415926535897932385)",
      "```"
    ],
    "options": {}
  },
  "default-domain(sphinx.directives.DefaultDomain)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-default-domain",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "default-domain",
    "is_markdown": true,
    "description": [
      "Select a new default domain.  While the [primary_domain](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-primary_domain) selects a",
      "global default, this only has an effect within the same file."
    ],
    "options": {}
  },
  "describe(sphinx.directives.ObjectDescription)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-describe",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "describe",
    "is_markdown": true,
    "description": [
      "This directive produces the same formatting as the specific ones provided by",
      "domains, but does not create index entries or cross-referencing targets.",
      "Example:",
      "",
      "```",
      ".. describe:: PAPER",
      "",
      "   You can set this variable to select a paper size.",
      "```"
    ],
    "options": {}
  },
  "envvar(sphinx.domains.std.EnvVar)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-envvar",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "envvar",
    "is_markdown": true,
    "description": [
      "Describes an environment variable that the documented code or program uses",
      "or defines.  Referenceable by [envvar](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-envvar)."
    ],
    "options": {}
  },
  "js:attribute(sphinx.domains.javascript.JSObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-js-attribute",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "js:attribute",
    "is_markdown": true,
    "description": [
      "Describes the attribute name of object."
    ],
    "options": {}
  },
  "js:class(sphinx.domains.javascript.JSConstructor)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-js-class",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "js:class",
    "is_markdown": true,
    "description": [
      "Describes a constructor that creates an object.  This is basically like a",
      "function but will show up with a class prefix:",
      "",
      "```",
      ".. js:class:: MyAnimal(name[, age])",
      "",
      "   :param string name: The name of the animal",
      "   :param number age: an optional age for the animal",
      "```",
      "",
      "This is rendered as:",
      "",
      "",
      "| | |",
      "|-|-|",
      "| param string name | The name of the animal |",
      "| param number age | an optional age for the animal |"
    ],
    "options": {}
  },
  "js:data(sphinx.domains.javascript.JSObject)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-js-data",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "js:data",
    "is_markdown": true,
    "description": [
      "Describes a global variable or constant."
    ],
    "options": {}
  },
  "js:function(sphinx.domains.javascript.JSCallable)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-js-function",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "js:function",
    "is_markdown": true,
    "description": [
      "Describes a JavaScript function or method.  If you want to describe",
      "arguments as optional use square brackets as [documented ](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#signatures)",
      "for Python signatures.",
      "",
      "You can use fields to give more details about arguments and their expected",
      "types, errors which may be thrown by the function, and the value being",
      "returned:",
      "",
      "```",
      ".. js:function:: $.getJSON(href, callback[, errback])",
      "",
      "   :param string href: An URI to the location of the resource.",
      "   :param callback: Gets called with the object.",
      "   :param errback:",
      "       Gets called in case the request fails. And a lot of other",
      "       text so we need multiple lines.",
      "   :throws SomeError: For whatever reason in that case.",
      "   :returns: Something.",
      "```",
      "",
      "This is rendered as:",
      "",
      "",
      "| | |",
      "|-|-|",
      "| param string href | An URI to the location of the resource. |",
      "| param callback | Gets called with the object. |",
      "| param errback | Gets called in case the request fails. And a lot of other",
      "text so we need multiple lines. |",
      "| throws SomeError | For whatever reason in that case. |",
      "| returns | Something. |"
    ],
    "options": {}
  },
  "js:method(sphinx.domains.javascript.JSCallable)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-js-method",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "js:method",
    "is_markdown": true,
    "description": [
      "This directive is an alias for [js:function](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-js-function), however it describes",
      "a function that is implemented as a method on a class object."
    ],
    "options": {}
  },
  "js:module(sphinx.domains.javascript.JSModule)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-js-module",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "js:module",
    "is_markdown": true,
    "description": [
      "This directive sets the module name for object declarations that follow",
      "after. The module name is used in the global module index and in cross",
      "references. This directive does not create an object heading like",
      "[py:class](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-class) would, for example.",
      "",
      "By default, this directive will create a linkable entity and will cause an",
      "entry in the global module index, unless the `noindex` option is",
      "specified.  If this option is specified, the directive will only update the",
      "current module name."
    ],
    "options": {}
  },
  "object(sphinx.directives.ObjectDescription)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-object",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "object",
    "is_markdown": true,
    "description": [
      "This directive produces the same formatting as the specific ones provided by",
      "domains, but does not create index entries or cross-referencing targets.",
      "Example:",
      "",
      "```",
      ".. describe:: PAPER",
      "",
      "   You can set this variable to select a paper size.",
      "```"
    ],
    "options": {}
  },
  "option(sphinx.domains.std.Cmdoption)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-option",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "option",
    "is_markdown": true,
    "description": [
      "Describes a command line argument or switch.  Option argument names should",
      "be enclosed in angle brackets.  Examples:",
      "",
      "```",
      ".. option:: dest_dir",
      "",
      "   Destination directory.",
      "",
      ".. option:: -m <module>, --module <module>",
      "",
      "   Run a module as a script.",
      "```",
      "",
      "The directive will create cross-reference targets for the given options,",
      "referenceable by [option](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-option) (in the example case, you'd use something",
      "like `:option:`dest_dir``, `:option:`-m``, or `:option:`--module``).",
      "",
      "`cmdoption` directive is a deprecated alias for the `option` directive."
    ],
    "options": {}
  },
  "program(sphinx.domains.std.Program)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-program",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "program",
    "is_markdown": true,
    "description": [
      "Like [py:currentmodule](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-currentmodule), this directive produces no output.",
      "Instead, it serves to notify Sphinx that all following [option](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-option)",
      "directives document options for the program called name.",
      "",
      "If you use [program](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-program), you have to qualify the references in your",
      "[option](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-option) roles by the program name, so if you have the following",
      "situation",
      "",
      "```",
      ".. program:: rm",
      "",
      ".. option:: -r",
      "",
      "   Work recursively.",
      "",
      ".. program:: svn",
      "",
      ".. option:: -r <revision>",
      "",
      "   Specify the revision to work upon.",
      "```",
      "",
      "then `:option:`rm -r`` would refer to the first option, while",
      "`:option:`svn -r`` would refer to the second one.",
      "",
      "If `None` is passed to the argument, the directive will reset the",
      "current program name.",
      "",
      "The program name may contain spaces (in case you want to document",
      "subcommands like `svn add` and `svn commit` separately)."
    ],
    "options": {}
  },
  "py:attribute(sphinx.domains.python.PyAttribute)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-attribute",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:attribute",
    "is_markdown": true,
    "description": [
      "Describes an object data attribute.  The description should include",
      "information about the type of the data to be expected and whether it may be",
      "changed directly.",
      "options",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "Describe the location where the object is defined if the object is",
      "imported from other modules"
    ],
    "options": {}
  },
  "py:class(sphinx.domains.python.PyClasslike)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-class",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:class",
    "is_markdown": true,
    "description": [
      "Describes a class.  The signature can optionally include parentheses with",
      "parameters which will be shown as the constructor arguments.  See also",
      "[signatures](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#signatures).",
      "",
      "Methods and attributes belonging to the class should be placed in this",
      "directive's body.  If they are placed outside, the supplied name should",
      "contain the class name so that cross-references still work.  Example:",
      "",
      "```",
      ".. py:class:: Foo",
      "",
      "   .. py:method:: quux()",
      "",
      "-- or --",
      "",
      ".. py:class:: Bar",
      "",
      ".. py:method:: Bar.quux()",
      "```",
      "",
      "The first way is the preferred one.",
      "options",
      "",
      "Describe the location where the object is defined if the object is",
      "imported from other modules",
      "",
      "",
      "",
      "",
      "",
      "Indicate the class is a final class."
    ],
    "options": {}
  },
  "py:classmethod(sphinx.domains.python.PyClassMethod)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-classmethod",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:classmethod",
    "is_markdown": true,
    "description": [
      "Like [py:method](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-method), but indicates that the method is a class method."
    ],
    "options": {}
  },
  "py:currentmodule(sphinx.domains.python.PyCurrentModule)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-currentmodule",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:currentmodule",
    "is_markdown": true,
    "description": [
      "This directive tells Sphinx that the classes, functions etc. documented from",
      "here are in the given module (like [py:module](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-module)), but it will not",
      "create index entries, an entry in the Global Module Index, or a link target",
      "for [py:mod](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#role-py-mod).  This is helpful in situations where documentation",
      "for things in a module is spread over multiple files or sections -- one",
      "location has the [py:module](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-module) directive, the others only",
      "[py:currentmodule](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-currentmodule)."
    ],
    "options": {}
  },
  "py:data(sphinx.domains.python.PyVariable)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-data",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:data",
    "is_markdown": true,
    "description": [
      "Describes global data in a module, including both variables and values used",
      "as \"defined constants.\"  Class and object attributes are not documented",
      "using this environment.",
      "options",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "Describe the location where the object is defined if the object is",
      "imported from other modules"
    ],
    "options": {}
  },
  "py:decorator(sphinx.domains.python.PyDecoratorFunction)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-decorator",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:decorator",
    "is_markdown": true,
    "description": [
      "Describes a decorator function.  The signature should represent the usage as",
      "a decorator.  For example, given the functions",
      "",
      "```",
      "def removename(func):",
      "    func.__name__ = ''",
      "    return func",
      "",
      "def setnewname(name):",
      "    def decorator(func):",
      "        func.__name__ = name",
      "        return func",
      "    return decorator",
      "```",
      "",
      "the descriptions should look like this:",
      "",
      "```",
      ".. py:decorator:: removename",
      "",
      "   Remove name of the decorated function.",
      "",
      ".. py:decorator:: setnewname(name)",
      "",
      "   Set name of the decorated function to *name*.",
      "```",
      "",
      "(as opposed to `.. py:decorator:: removename(func)`.)",
      "",
      "There is no `py:deco` role to link to a decorator that is marked up with",
      "this directive; rather, use the [py:func](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#role-py-func) role."
    ],
    "options": {}
  },
  "py:decoratormethod(sphinx.domains.python.PyDecoratorMethod)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-decoratormethod",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:decoratormethod",
    "is_markdown": true,
    "description": [
      "Same as [py:decorator](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-decorator), but for decorators that are methods.",
      "",
      "Refer to a decorator method using the [py:meth](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#role-py-meth) role."
    ],
    "options": {}
  },
  "py:exception(sphinx.domains.python.PyClasslike)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-exception",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:exception",
    "is_markdown": true,
    "description": [
      "Describes an exception class.  The signature can, but need not include",
      "parentheses with constructor arguments.",
      "options",
      "",
      "Indicate the class is a final class."
    ],
    "options": {}
  },
  "py:function(sphinx.domains.python.PyFunction)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-function",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:function",
    "is_markdown": true,
    "description": [
      "Describes a module-level function.  The signature should include the",
      "parameters as given in the Python function definition, see [signatures](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#signatures).",
      "For example:",
      "",
      "```",
      ".. py:function:: Timer.repeat(repeat=3, number=1000000)",
      "```",
      "",
      "For methods you should use [py:method](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-method).",
      "",
      "The description normally includes information about the parameters required",
      "and how they are used (especially whether mutable objects passed as",
      "parameters are modified), side effects, and possible exceptions.",
      "",
      "This information can (in any `py` directive) optionally be given in a",
      "structured form, see [info-field-lists](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#info-field-lists).",
      "options",
      "",
      "Indicate the function is an async function.",
      "",
      "",
      "",
      "",
      "",
      "Describe the location where the object is defined if the object is",
      "imported from other modules"
    ],
    "options": {}
  },
  "py:method(sphinx.domains.python.PyMethod)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-method",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:method",
    "is_markdown": true,
    "description": [
      "Describes an object method.  The parameters should not include the `self`",
      "parameter.  The description should include similar information to that",
      "described for `function`.  See also [signatures](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#signatures) and",
      "[info-field-lists](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#info-field-lists).",
      "options",
      "",
      "Indicate the method is an abstract method.",
      "",
      "",
      "",
      "",
      "",
      "Indicate the method is an async method.",
      "",
      "",
      "",
      "",
      "",
      "Describe the location where the object is defined if the object is",
      "imported from other modules",
      "",
      "",
      "",
      "",
      "",
      "Indicate the method is a class method.",
      "",
      "",
      "",
      "",
      "",
      "Indicate the class is a final method.",
      "",
      "",
      "",
      "",
      "",
      "Indicate the method is a property.",
      "",
      "",
      "",
      "",
      "Use [py:property](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-property) instead.",
      "",
      "",
      "",
      "",
      "Indicate the method is a static method."
    ],
    "options": {}
  },
  "py:module(sphinx.domains.python.PyModule)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-module",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:module",
    "is_markdown": true,
    "description": [
      "This directive marks the beginning of the description of a module (or package",
      "submodule, in which case the name should be fully qualified, including the",
      "package name).  It does not create content (like e.g. [py:class](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-class)",
      "does).",
      "",
      "This directive will also cause an entry in the global module index.",
      "options",
      "",
      "Indicate platforms which the module is available (if it is available on",
      "all platforms, the option should be omitted).  The keys are short",
      "identifiers; examples that are in use include \"IRIX\", \"Mac\", \"Windows\"",
      "and \"Unix\".  It is important to use a key which has already been used when",
      "applicable.",
      "",
      "",
      "",
      "Consist of one sentence describing the module's purpose -- it is currently",
      "only used in the Global Module Index.",
      "",
      "",
      "",
      "Mark a module as deprecated; it will be designated as such in various",
      "locations then."
    ],
    "options": {}
  },
  "py:property(sphinx.domains.python.PyProperty)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-property",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:property",
    "is_markdown": true,
    "description": [
      "Describes an object property.",
      "",
      "",
      "options",
      "",
      "Indicate the property is abstract.",
      "",
      "",
      "",
      "Indicate the property is a classmethod.",
      "versionaddedd: 4.2"
    ],
    "options": {}
  },
  "py:staticmethod(sphinx.domains.python.PyStaticMethod)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-staticmethod",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "py:staticmethod",
    "is_markdown": true,
    "description": [
      "Like [py:method](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-method), but indicates that the method is a static method."
    ],
    "options": {}
  },
  "rst:directive(sphinx.domains.rst.ReSTDirective)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-rst-directive",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "rst:directive",
    "is_markdown": true,
    "description": [
      "Describes a reST directive.  The name can be a single directive name or",
      "actual directive syntax (.. prefix and :: suffix) with arguments that",
      "will be rendered differently.  For example:",
      "",
      "```",
      ".. rst:directive:: foo",
      "",
      "   Foo description.",
      "",
      ".. rst:directive:: .. bar:: baz",
      "",
      "   Bar description.",
      "```",
      "",
      "will be rendered as:",
      "",
      "",
      "Foo description.",
      "",
      "",
      "",
      "Bar description."
    ],
    "options": {}
  },
  "rst:directive:option(sphinx.domains.rst.ReSTDirectiveOption)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-rst-directive-option",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "rst:directive:option",
    "is_markdown": true,
    "description": [
      "Describes an option for reST directive.  The name can be a single option",
      "name or option name with arguments which separated with colon (`:`).",
      "For example:",
      "",
      "```",
      ".. rst:directive:: toctree",
      "",
      "   .. rst:directive:option:: caption: caption of ToC",
      "",
      "   .. rst:directive:option:: glob",
      "```",
      "",
      "will be rendered as:",
      "",
      "",
      "",
      "",
      "",
      "",
      "options",
      "",
      "Describe the type of option value.",
      "",
      "For example:",
      "",
      "```",
      ".. rst:directive:: toctree",
      "",
      "   .. rst:directive:option:: maxdepth",
      "      :type: integer or no value",
      "```"
    ],
    "options": {}
  },
  "rst:role(sphinx.domains.rst.ReSTRole)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-rst-role",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "rst:role",
    "is_markdown": true,
    "description": [
      "Describes a reST role.  For example:",
      "",
      "```",
      ".. rst:role:: foo",
      "",
      "   Foo description.",
      "```",
      "",
      "will be rendered as:",
      "",
      "",
      "Foo description."
    ],
    "options": {}
  },
  "centered(sphinx.directives.other.Centered)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-centered",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "centered",
    "is_markdown": true,
    "description": [
      "This directive creates a centered boldfaced line of text.  Use it as",
      "follows:",
      "",
      "```",
      ".. centered:: LICENSE AGREEMENT",
      "```"
    ],
    "options": {}
  },
  "code-block(sphinx.directives.code.CodeBlock)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-code-block",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "code-block",
    "is_markdown": true,
    "description": [
      "Example:",
      "",
      "```",
      ".. code-block:: ruby",
      "",
      "   Some Ruby code.",
      "```",
      "",
      "The directive's alias name [sourcecode](https://www.sphinx-doc.org/en/master/_sources/usage/restructuredtext/directives.rst.txt#None) works as well.  This",
      "directive takes a language name as an argument.  It can be [any lexer alias",
      "supported by Pygments](https://pygments.org/docs/lexers/).  If it is not",
      "given, the setting of [highlight](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-highlight) directive will be used.",
      "If not set, [highlight_language](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-highlight_language) will be used.",
      "",
      "",
      "options",
      "",
      "Enable to generate line numbers for the code block:",
      "",
      "```",
      ".. code-block:: ruby",
      "   :linenos:",
      "",
      "   Some more Ruby code.",
      "```",
      "",
      "",
      "",
      "Set the first line number of the code block.  If present, `linenos`",
      "option is also automatically activated:",
      "",
      "```",
      ".. code-block:: ruby",
      "   :lineno-start: 10",
      "",
      "   Some more Ruby code, with line numbering starting at 10.",
      "```",
      "",
      "",
      "",
      "",
      "",
      "Emphasize particular lines of the code block:",
      "",
      "```",
      ".. code-block:: python",
      "   :emphasize-lines: 3,5",
      "",
      "   def some_function():",
      "       interesting = False",
      "       print 'This line is highlighted.'",
      "       print 'This one is not...'",
      "       print '...but this one is.'",
      "```",
      "",
      "",
      "",
      "",
      "",
      "rst:directive:option: force",
      ":type: no value",
      "",
      "Ignore minor errors on highlighting",
      "",
      ".. versionchanged:: 2.1",
      "",
      "Set a caption to the code block.",
      "",
      "",
      "",
      "",
      "",
      "Define implicit target name that can be referenced by using",
      "[ref](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-ref).  For example:",
      "",
      "```",
      ".. code-block:: python",
      "   :caption: this.py",
      "   :name: this-py",
      "",
      "   print 'Explicit is better than implicit.'",
      "```",
      "",
      "In order to cross-reference a code-block using either the",
      "[ref](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-ref) or the [numref](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-numref) role, it is necessary",
      "that both name and caption be defined. The",
      "argument of name can then be given to [numref](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-numref)",
      "to generate the cross-reference. Example:",
      "",
      "```",
      "See :numref:`this-py` for an example.",
      "```",
      "",
      "When using [ref](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-ref), it is possible to generate a cross-reference",
      "with only name defined, provided an explicit title is",
      "given. Example:",
      "",
      "```",
      "See :ref:`this code snippet <this-py>` for an example.",
      "```",
      "",
      "",
      "",
      "",
      "",
      "Strip indentation characters from the code block.  When number given,",
      "leading N characters are removed.  When no argument given, leading spaces",
      "are removed via [textwrap.dedent()](https://www.sphinx-doc.org/en/master/_sources/usage/restructuredtext/directives.rst.txt#None).  For example:",
      "",
      "```",
      ".. code-block:: ruby",
      "   :linenos:",
      "   :dedent: 4",
      "",
      "       some ruby code",
      "```",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "If given, minor errors on highlighting are ignored."
    ],
    "options": {}
  },
  "codeauthor(sphinx.directives.other.Author)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-codeauthor",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "codeauthor",
    "is_markdown": true,
    "description": [
      "The [codeauthor](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-codeauthor) directive, which can appear multiple times, names",
      "the authors of the described code, just like [sectionauthor](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-sectionauthor) names",
      "the author(s) of a piece of documentation.  It too only produces output if",
      "the [show_authors](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-show_authors) configuration value is `True`."
    ],
    "options": {}
  },
  "deprecated(sphinx.domains.changeset.VersionChange)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-deprecated",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "deprecated",
    "is_markdown": true,
    "description": [
      "Similar to [versionchanged](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-versionchanged), but describes when the feature was",
      "deprecated.  An explanation can also be given, for example to inform the",
      "reader what should be used instead.  Example:",
      "",
      "```",
      ".. deprecated:: 3.1",
      "   Use :func:`spam` instead.",
      "```"
    ],
    "options": {}
  },
  "glossary(sphinx.domains.std.Glossary)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-glossary",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "glossary",
    "is_markdown": true,
    "description": [
      "This directive must contain a reST definition-list-like markup with terms and",
      "definitions.  The definitions will then be referenceable with the",
      "[term](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-term) role.  Example:",
      "",
      "```",
      ".. glossary::",
      "",
      "   environment",
      "      A structure where information about all documents under the root is",
      "      saved, and used for cross-referencing.  The environment is pickled",
      "      after the parsing stage, so that successive runs only need to read",
      "      and parse new and changed documents.",
      "",
      "   source directory",
      "      The directory which, including its subdirectories, contains all",
      "      source files for one Sphinx project.",
      "```",
      "",
      "In contrast to regular definition lists, multiple terms per entry are",
      "allowed, and inline markup is allowed in terms.  You can link to all of the",
      "terms.  For example:",
      "",
      "```",
      ".. glossary::",
      "",
      "   term 1",
      "   term 2",
      "      Definition of both terms.",
      "```",
      "",
      "(When the glossary is sorted, the first term determines the sort order.)",
      "",
      "If you want to specify \"grouping key\" for general index entries, you can put",
      "a \"key\" as \"term : key\". For example:",
      "",
      "```",
      ".. glossary::",
      "",
      "   term 1 : A",
      "   term 2 : B",
      "      Definition of both terms.",
      "```",
      "",
      "Note that \"key\" is used for grouping key as is.",
      "The \"key\" isn't normalized; key \"A\" and \"a\" become different groups.",
      "The whole characters in \"key\" is used instead of a first character; it is",
      "used for \"Combining Character Sequence\" and \"Surrogate Pairs\" grouping key.",
      "",
      "In i18n situation, you can specify \"localized term : key\" even if original",
      "text only have \"term\" part. In this case, translated \"localized term\" will be",
      "categorized in \"key\" group."
    ],
    "options": {}
  },
  "highlight(sphinx.directives.code.Highlight)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-highlight",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "highlight",
    "is_markdown": true,
    "description": [
      "Example:",
      "",
      "```",
      ".. highlight:: c",
      "```",
      "",
      "This language is used until the next `highlight` directive is encountered.",
      "As discussed previously, language can be any lexer alias supported by",
      "Pygments.",
      "options",
      "",
      "Enable to generate line numbers for code blocks.",
      "",
      "This option takes an optional number as threshold parameter.  If any",
      "threshold given, the directive will produce line numbers only for the code",
      "blocks longer than N lines.  If not given, line numbers will be produced",
      "for all of code blocks.",
      "",
      "Example:",
      "",
      "```",
      ".. highlight:: python",
      "   :linenothreshold: 5",
      "```",
      "",
      "",
      "",
      "If given, minor errors on highlighting are ignored."
    ],
    "options": {}
  },
  "hlist(sphinx.directives.other.HList)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-hlist",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "hlist",
    "is_markdown": true,
    "description": [
      "This directive must contain a bullet list.  It will transform it into a more",
      "compact list by either distributing more than one item horizontally, or",
      "reducing spacing between items, depending on the builder.",
      "",
      "For builders that support the horizontal distribution, there is a `columns`",
      "option that specifies the number of columns; it defaults to 2.  Example:",
      "",
      "```",
      ".. hlist::",
      "   :columns: 3",
      "",
      "   * A list of",
      "   * short items",
      "   * that should be",
      "   * displayed",
      "   * horizontally",
      "```"
    ],
    "options": {}
  },
  "index(sphinx.domains.index.IndexDirective)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-index",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "index",
    "is_markdown": true,
    "description": [
      "This directive contains one or more index entries.  Each entry consists of a",
      "type and a value, separated by a colon.",
      "",
      "For example:",
      "",
      "```",
      ".. index::",
      "   single: execution; context",
      "   module: __main__",
      "   module: sys",
      "   triple: module; search; path",
      "",
      "The execution context",
      "---------------------",
      "",
      "...",
      "```",
      "",
      "This directive contains five entries, which will be converted to entries in",
      "the generated index which link to the exact location of the index statement",
      "(or, in case of offline media, the corresponding page number).",
      "",
      "Since index directives generate cross-reference targets at their location in",
      "the source, it makes sense to put them before the thing they refer to --",
      "e.g. a heading, as in the example above.",
      "",
      "The possible entry types are:",
      "",
      "`single`: ",
      "Creates a single index entry.  Can be made a subentry by separating the",
      "subentry text with a semicolon (this notation is also used below to",
      "describe what entries are created).",
      "",
      "`pair`: ",
      "`pair: loop; statement` is a shortcut that creates two index entries,",
      "namely `loop; statement` and `statement; loop`.",
      "",
      "`triple`: ",
      "Likewise, `triple: module; search; path` is a shortcut that creates",
      "three index entries, which are `module; search path`, `search; path,",
      "module` and `path; module search`.",
      "",
      "`see`: ",
      "`see: entry; other` creates an index entry that refers from `entry` to",
      "`other`.",
      "",
      "`seealso`: ",
      "Like `see`, but inserts \"see also\" instead of \"see\".",
      "",
      "`module, keyword, operator, object, exception, statement, builtin`: ",
      "These all create two index entries.  For example, `module: hashlib`",
      "creates the entries `module; hashlib` and `hashlib; module`.  (These",
      "are Python-specific and therefore deprecated.)",
      "",
      "You can mark up \"main\" index entries by prefixing them with an exclamation",
      "mark.  The references to \"main\" entries are emphasized in the generated",
      "index.  For example, if two pages contain",
      "",
      "```",
      ".. index:: Python",
      "```",
      "",
      "and one page contains",
      "",
      "```",
      ".. index:: ! Python",
      "```",
      "",
      "then the backlink to the latter page is emphasized among the three backlinks.",
      "",
      "For index directives containing only \"single\" entries, there is a shorthand",
      "notation:",
      "",
      "```",
      ".. index:: BNF, grammar, syntax, notation",
      "```",
      "",
      "This creates four index entries.",
      "",
      "",
      "options",
      "",
      "Define implicit target name that can be referenced by using",
      "[ref](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-ref).  For example:",
      "",
      "```",
      ".. index:: Python",
      "   :name: py-index",
      "```"
    ],
    "options": {
      "single": "\nCreates a single index entry.  Can be made a subentry by separating the\nsubentry text with a semicolon (this notation is also used below to\ndescribe what entries are created).\n",
      "pair": "\n`pair: loop; statement` is a shortcut that creates two index entries,\nnamely `loop; statement` and `statement; loop`.\n",
      "triple": "\nLikewise, `triple: module; search; path` is a shortcut that creates\nthree index entries, which are `module; search path`, `search; path,\nmodule` and `path; module search`.\n",
      "see": "\n`see: entry; other` creates an index entry that refers from `entry` to\n`other`.\n",
      "seealso": "\nLike `see`, but inserts \"see also\" instead of \"see\".\n",
      "module, keyword, operator, object, exception, statement, builtin": "\nThese all create two index entries.  For example, `module: hashlib`\ncreates the entries `module; hashlib` and `hashlib; module`.  (These\nare Python-specific and therefore deprecated.)\n"
    }
  },
  "literalinclude(sphinx.directives.code.LiteralInclude)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-literalinclude",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "literalinclude",
    "is_markdown": true,
    "description": [
      "Longer displays of verbatim text may be included by storing the example text",
      "in an external file containing only plain text.  The file may be included",
      "using the `literalinclude` directive. 3 For example, to include the",
      "Python source file `example.py`, use:",
      "",
      "```",
      ".. literalinclude:: example.py",
      "```",
      "",
      "The file name is usually relative to the current file's path.  However, if",
      "it is absolute (starting with `/`), it is relative to the top source",
      "directory.",
      "",
      "Additional options",
      "",
      "Like [code-block](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-code-block), the directive supports the `linenos` flag",
      "option to switch on line numbers, the `lineno-start` option to select the",
      "first line number, the `emphasize-lines` option to emphasize particular",
      "lines, the `name` option to provide an implicit target name, the",
      "`dedent` option to strip indentation characters for the code block, and a",
      "`language` option to select a language different from the current file's",
      "standard language. In addition, it supports the `caption` option; however,",
      "this can be provided with no argument to use the filename as the caption.",
      "Example with options:",
      "",
      "```",
      ".. literalinclude:: example.rb",
      "   :language: ruby",
      "   :emphasize-lines: 12,15-18",
      "   :linenos:",
      "```",
      "",
      "Tabs in the input are expanded if you give a `tab-width` option with the",
      "desired tab width.",
      "",
      "Include files are assumed to be encoded in the [source_encoding](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-source_encoding).",
      "If the file has a different encoding, you can specify it with the",
      "`encoding` option:",
      "",
      "```",
      ".. literalinclude:: example.py",
      "   :encoding: latin-1",
      "```",
      "",
      "The directive also supports including only parts of the file.  If it is a",
      "Python module, you can select a class, function or method to include using",
      "the `pyobject` option:",
      "",
      "```",
      ".. literalinclude:: example.py",
      "   :pyobject: Timer.start",
      "```",
      "",
      "This would only include the code lines belonging to the `start()` method",
      "in the `Timer` class within the file.",
      "",
      "Alternately, you can specify exactly which lines to include by giving a",
      "`lines` option:",
      "",
      "```",
      ".. literalinclude:: example.py",
      "   :lines: 1,3,5-10,20-",
      "```",
      "",
      "This includes the lines 1, 3, 5 to 10 and lines 20 to the last line.",
      "",
      "Another way to control which part of the file is included is to use the",
      "`start-after` and `end-before` options (or only one of them).  If",
      "`start-after` is given as a string option, only lines that follow the",
      "first line containing that string are included.  If `end-before` is given",
      "as a string option, only lines that precede the first lines containing that",
      "string are included. The `start-at` and `end-at` options behave in a",
      "similar way, but the lines containing the matched string are included.",
      "",
      "`start-after`/`start-at` and `end-before`/`end-at` can have same string.",
      "`start-after`/`start-at` filter lines before the line that contains",
      "option string (`start-at` will keep the line). Then `end-before`/`end-at`",
      "filter lines after the line that contains option string (`end-at` will keep",
      "the line and `end-before` skip the first line).",
      "",
      "If you want to select only `[second-section]` of ini file like the",
      "following, you can use `:start-at: [second-section]` and",
      "`:end-before: [third-section]`:",
      "",
      "```",
      "[first-section]",
      "",
      "var_in_first=true",
      "",
      "[second-section]",
      "",
      "var_in_second=true",
      "",
      "[third-section]",
      "",
      "var_in_third=true",
      "```",
      "",
      "Useful cases of these option is working with tag comments.",
      "`:start-after: [initialized]` and `:end-before: [initialized]` options",
      "keep lines between comments:",
      "",
      "```",
      "if __name__ == \"__main__\":",
      "    # [initialize]",
      "    app.start(\":8000\")",
      "    # [initialize]",
      "```",
      "",
      "When lines have been selected in any of the ways described above, the line",
      "numbers in `emphasize-lines` refer to those selected lines, counted",
      "consecutively starting at `1`.",
      "",
      "When specifying particular parts of a file to display, it can be useful to",
      "display the original line numbers. This can be done using the",
      "`lineno-match` option, which is however allowed only when the selection",
      "consists of contiguous lines.",
      "",
      "You can prepend and/or append a line to the included code, using the",
      "`prepend` and `append` option, respectively.  This is useful e.g. for",
      "highlighting PHP code that doesn't include the `<?php`/`?>` markers.",
      "",
      "If you want to show the diff of the code, you can specify the old file by",
      "giving a `diff` option:",
      "",
      "```",
      ".. literalinclude:: example.py",
      "   :diff: example.py.orig",
      "```",
      "",
      "This shows the diff between `example.py` and `example.py.orig` with",
      "unified diff format.",
      "",
      "A `force` option can ignore minor errors on highlighting."
    ],
    "options": {}
  },
  "math(sphinx.directives.patches.MathDirective)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-math",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "math",
    "is_markdown": true,
    "description": [
      "Directive for displayed math (math that takes the whole line for itself).",
      "",
      "The directive supports multiple equations, which should be separated by a",
      "blank line:",
      "",
      "```",
      ".. math::",
      "",
      "   (a + b)^2 = a^2 + 2ab + b^2",
      "",
      "   (a - b)^2 = a^2 - 2ab + b^2",
      "```",
      "",
      "In addition, each single equation is set within a `split` environment,",
      "which means that you can have multiple aligned lines in an equation,",
      "aligned at `&` and separated by `\\\\`:",
      "",
      "```",
      ".. math::",
      "",
      "   (a + b)^2  &=  (a + b)(a + b) \\\\",
      "              &=  a^2 + 2ab + b^2",
      "```",
      "",
      "For more details, look into the documentation of the [AmSMath LaTeX",
      "package](https://www.ams.org/publications/authors/tex/amslatex).",
      "",
      "When the math is only one line of text, it can also be given as a directive",
      "argument:",
      "",
      "```",
      ".. math:: (a + b)^2 = a^2 + 2ab + b^2",
      "```",
      "",
      "Normally, equations are not numbered.  If you want your equation to get a",
      "number, use the `label` option.  When given, it selects an internal label",
      "for the equation, by which it can be cross-referenced, and causes an equation",
      "number to be issued.  See [eq](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-eq) for an example.  The numbering",
      "style depends on the output format.",
      "",
      "There is also an option `nowrap` that prevents any wrapping of the given",
      "math in a math environment.  When you give this option, you must make sure",
      "yourself that the math is properly set up.  For example:",
      "",
      "```",
      ".. math::",
      "   :nowrap:",
      "",
      "   \\begin{eqnarray}",
      "      y    & = & ax^2 + bx + c \\\\",
      "      f(x) & = & x^2 + 2xy + y^2",
      "   \\end{eqnarray}",
      "```"
    ],
    "options": {}
  },
  "note(docutils.parsers.rst.directives.admonitions.Note)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-note",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "note",
    "is_markdown": true,
    "description": [
      "An especially important bit of information about an API that a user should be",
      "aware of when using whatever bit of API the note pertains to.  The content of",
      "the directive should be written in complete sentences and include all",
      "appropriate punctuation.",
      "",
      "Example:",
      "",
      "```",
      ".. note::",
      "",
      "   This function is not suitable for sending spam e-mails.",
      "```"
    ],
    "options": {}
  },
  "only(sphinx.directives.other.Only)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-only",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "only",
    "is_markdown": true,
    "description": [
      "Include the content of the directive only if the expression is true.  The",
      "expression should consist of tags, like this:",
      "",
      "```",
      ".. only:: html and draft",
      "```",
      "",
      "Undefined tags are false, defined tags (via the `-t` command-line option or",
      "within `conf.py`, see [here ](https://www.sphinx-doc.org/en/master/usage/configuration.html#conf-tags)) are true.  Boolean",
      "expressions, also using parentheses (like `html and (latex or draft)`) are",
      "supported.",
      "",
      "The format and the name of the current builder (`html`, `latex` or",
      "`text`) are always set as a tag 4.  To make the distinction between",
      "format and name explicit, they are also added with the prefix `format_` and",
      "`builder_`, e.g. the epub builder defines the tags  `html`, `epub`,",
      "`format_html` and `builder_epub`.",
      "",
      "These standard tags are set after the configuration file is read, so they",
      "are not available there.",
      "",
      "All tags must follow the standard Python identifier syntax as set out in",
      "the [Identifiers and keywords](https://docs.python.org/3/reference/lexical_analysis.html#identifiers)",
      "documentation.  That is, a tag expression may only consist of tags that",
      "conform to the syntax of Python variables.  In ASCII, this consists of the",
      "uppercase and lowercase letters `A` through `Z`, the underscore `_`",
      "and, except for the first character, the digits `0` through `9`.",
      "",
      "",
      "",
      "",
      "",
      "This directive is designed to control only content of document.  It could",
      "not control sections, labels and so on."
    ],
    "options": {}
  },
  "productionlist(sphinx.domains.std.ProductionList)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-productionlist",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "productionlist",
    "is_markdown": true,
    "description": [
      "This directive is used to enclose a group of productions.  Each production",
      "is given on a single line and consists of a name, separated by a colon from",
      "the following definition.  If the definition spans multiple lines, each",
      "continuation line must begin with a colon placed at the same column as in",
      "the first line.",
      "Blank lines are not allowed within `productionlist` directive arguments.",
      "",
      "The definition can contain token names which are marked as interpreted text",
      "(e.g., \"`sum ::= `integer` \"+\" `integer``\") -- this generates",
      "cross-references to the productions of these tokens.  Outside of the",
      "production list, you can reference to token productions using",
      "[token](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-token).",
      "",
      "The productionGroup argument to [productionlist](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-productionlist) serves to",
      "distinguish different sets of production lists that belong to different",
      "grammars.  Multiple production lists with the same productionGroup thus",
      "define rules in the same scope.",
      "",
      "Inside of the production list, tokens implicitly refer to productions",
      "from the current group. You can refer to the production of another",
      "grammar by prefixing the token with its group name and a colon, e.g,",
      "\"`otherGroup:sum`\". If the group of the token should not be shown in",
      "the production, it can be prefixed by a tilde, e.g.,",
      "\"`~otherGroup:sum`\". To refer to a production from an unnamed",
      "grammar, the token should be prefixed by a colon, e.g., \"`:sum`\".",
      "",
      "Outside of the production list,",
      "if you have given a productionGroup argument you must prefix the",
      "token name in the cross-reference with the group name and a colon,",
      "e.g., \"`myGroup:sum`\" instead of just \"`sum`\".",
      "If the group should not be shown in the title of the link either",
      "an explicit title can be given (e.g., \"`myTitle <myGroup:sum>`\"),",
      "or the target can be prefixed with a tilde (e.g., \"`~myGroup:sum`\").",
      "",
      "Note that no further reST parsing is done in the production, so that you",
      "don't have to escape `*` or `|` characters."
    ],
    "options": {}
  },
  "rubric(docutils.parsers.rst.directives.body.Rubric)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-rubric",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "rubric",
    "is_markdown": true,
    "description": [
      "This directive creates a paragraph heading that is not used to create a",
      "table of contents node.",
      "",
      "If the title of the rubric is \"Footnotes\" (or the selected language's",
      "equivalent), this rubric is ignored by the LaTeX writer, since it is",
      "assumed to only contain footnote definitions and therefore would create an",
      "empty heading."
    ],
    "options": {}
  },
  "sectionauthor(sphinx.directives.other.Author)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-sectionauthor",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "sectionauthor",
    "is_markdown": true,
    "description": [
      "Identifies the author of the current section.  The argument should include",
      "the author's name such that it can be used for presentation and email",
      "address.  The domain name portion of the address should be lower case.",
      "Example:",
      "",
      "```",
      ".. sectionauthor:: Guido van Rossum <guido@python.org>",
      "```",
      "",
      "By default, this markup isn't reflected in the output in any way (it helps",
      "keep track of contributions), but you can set the configuration value",
      "[show_authors](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-show_authors) to `True` to make them produce a paragraph in the",
      "output."
    ],
    "options": {}
  },
  "seealso(sphinx.directives.other.SeeAlso)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-seealso",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "seealso",
    "is_markdown": true,
    "description": [
      "Many sections include a list of references to module documentation or",
      "external documents.  These lists are created using the [seealso](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-seealso)",
      "directive.",
      "",
      "The [seealso](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-seealso) directive is typically placed in a section just before",
      "any subsections.  For the HTML output, it is shown boxed off from the main",
      "flow of the text.",
      "",
      "The content of the [seealso](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-seealso) directive should be a reST definition",
      "list. Example:",
      "",
      "```",
      ".. seealso::",
      "",
      "   Module :py:mod:`zipfile`",
      "      Documentation of the :py:mod:`zipfile` standard module.",
      "",
      "   `GNU tar manual, Basic Tar Format <http://link>`_",
      "      Documentation for tar archive files, including GNU tar extensions.",
      "```",
      "",
      "There's also a \"short form\" allowed that looks like this:",
      "",
      "```",
      ".. seealso:: modules :py:mod:`zipfile`, :py:mod:`tarfile`",
      "```"
    ],
    "options": {}
  },
  "tabularcolumns(sphinx.directives.other.TabularColumns)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-tabularcolumns",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "tabularcolumns",
    "is_markdown": true,
    "description": [
      "This directive gives a \"column spec\" for the next table occurring in the",
      "source file.  The spec is the second argument to the LaTeX `tabulary`",
      "package's environment (which Sphinx uses to translate tables).  It can have",
      "values like",
      "",
      "```",
      "|l|l|l|",
      "```",
      "",
      "which means three left-adjusted, nonbreaking columns.  For columns with",
      "longer text that should automatically be broken, use either the standard",
      "`p{width}` construct, or tabulary's automatic specifiers:",
      "",
      "`L`",
      "",
      "flush left column with automatic width",
      "",
      "`R`",
      "",
      "flush right column with automatic width",
      "",
      "`C`",
      "",
      "centered column with automatic width",
      "",
      "`J`",
      "",
      "justified column with automatic width",
      "",
      "The automatic widths of the `LRCJ` columns are attributed by `tabulary`",
      "in proportion to the observed shares in a first pass where the table cells",
      "are rendered at their natural \"horizontal\" widths.",
      "",
      "By default, Sphinx uses a table layout with `J` for every column.",
      "",
      "",
      "",
      "",
      "",
      "Sphinx actually uses `T` specifier having done `\\newcolumntype{T}{J}`.",
      "To revert to previous default, insert `\\newcolumntype{T}{L}` in the",
      "LaTeX preamble (see [latex_elements](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-latex_elements)).",
      "",
      "A frequent issue with tabulary is that columns with little contents are",
      "\"squeezed\". The minimal column width is a tabulary parameter called",
      "`\\tymin`. You may set it globally in the LaTeX preamble via",
      "`\\setlength{\\tymin}{40pt}` for example.",
      "",
      "Else, use the [tabularcolumns](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-tabularcolumns) directive with an explicit",
      "`p{40pt}` (for example) for that column. You may use also `l`",
      "specifier but this makes the task of setting column widths more difficult",
      "if some merged cell intersects that column.",
      "",
      "Tables with more than 30 rows are rendered using `longtable`, not",
      "`tabulary`, in order to allow pagebreaks. The `L`, `R`, ...",
      "specifiers do not work for these tables.",
      "",
      "Tables that contain list-like elements such as object descriptions,",
      "blockquotes or any kind of lists cannot be set out of the box with",
      "`tabulary`. They are therefore set with the standard LaTeX `tabular`",
      "(or `longtable`) environment if you don't give a `tabularcolumns`",
      "directive.  If you do, the table will be set with `tabulary` but you",
      "must use the `p{width}` construct (or Sphinx's `\\X` and `\\Y`",
      "specifiers described below) for the columns containing these elements.",
      "",
      "Literal blocks do not work with `tabulary` at all, so tables containing",
      "a literal block are always set with `tabular`. The verbatim environment",
      "used for literal blocks only works in `p{width}` (and `\\X` or `\\Y`)",
      "columns, hence Sphinx generates such column specs for tables containing",
      "literal blocks.",
      "",
      "Since Sphinx 1.5, the `\\X{a}{b}` specifier is used (there is a backslash",
      "in the specifier letter). It is like `p{width}` with the width set to a",
      "fraction `a/b` of the current line width. You can use it in the",
      "[tabularcolumns](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-tabularcolumns) (it is not a problem if some LaTeX macro is also",
      "called `\\X`.)",
      "",
      "It is not needed for `b` to be the total number of columns, nor for the",
      "sum of the fractions of the `\\X` specifiers to add  up to one. For example",
      "`|\\X{2}{5}|\\X{1}{5}|\\X{1}{5}|` is legitimate and the table will occupy",
      "80% of the line width, the first of its three columns having the same width",
      "as the sum  of the next two.",
      "",
      "This is used by the `:widths:` option of the [table](https://docutils.sourceforge.io/docs/ref/rst/directives.html#table) directive.",
      "",
      "Since Sphinx 1.6, there is also the `\\Y{f}` specifier which admits a",
      "decimal argument, such has `\\Y{0.15}`: this would have the same effect as",
      "`\\X{3}{20}`.",
      "",
      "",
      "Merged cells from complex grid tables (either multi-row, multi-column, or",
      "both) now allow blockquotes, lists, literal blocks, ... as do regular",
      "cells.",
      "",
      "Sphinx's merged cells interact well with `p{width}`, `\\X{a}{b}`,",
      "`\\Y{f}` and tabulary's columns.",
      "",
      "",
      "[tabularcolumns](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-tabularcolumns) conflicts with `:widths:` option of table",
      "directives.  If both are specified, `:widths:` option will be ignored."
    ],
    "options": {}
  },
  "toctree(sphinx.directives.other.TocTree)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-toctree",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "toctree",
    "is_markdown": true,
    "description": [
      "This directive inserts a \"TOC tree\" at the current location, using the",
      "individual TOCs (including \"sub-TOC trees\") of the documents given in the",
      "directive body.  Relative document names (not beginning with a slash) are",
      "relative to the document the directive occurs in, absolute names are relative",
      "to the source directory.  A numeric `maxdepth` option may be given to",
      "indicate the depth of the tree; by default, all levels are included. 1",
      "",
      "The representation of \"TOC tree\" is changed in each output format.  The",
      "builders that output multiple files (ex. HTML) treat it as a collection of",
      "hyperlinks.  On the other hand, the builders that output a single file (ex.",
      "LaTeX, man page, etc.) replace it with the content of the documents on the",
      "TOC tree.",
      "",
      "Consider this example (taken from the Python docs' library reference index):",
      "",
      "```",
      ".. toctree::",
      "   :maxdepth: 2",
      "",
      "   intro",
      "   strings",
      "   datatypes",
      "   numeric",
      "   (many more documents listed here)",
      "```",
      "",
      "This accomplishes two things:",
      "- Tables of contents from all those documents are inserted, with a maximum",
      "depth of two, that means one nested heading.  `toctree` directives in",
      "those documents are also taken into account.",
      "- Sphinx knows the relative order of the documents `intro`,",
      "`strings` and so forth, and it knows that they are children of the shown",
      "document, the library index.  From this information it generates \"next",
      "chapter\", \"previous chapter\" and \"parent chapter\" links.",
      "",
      "Entries",
      "",
      "Document titles in the [toctree](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-toctree) will be automatically read from the",
      "title of the referenced document. If that isn't what you want, you can",
      "specify an explicit title and target using a similar syntax to reST",
      "hyperlinks (and Sphinx's [cross-referencing syntax ](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#xref-syntax)). This",
      "looks like:",
      "",
      "```",
      ".. toctree::",
      "",
      "   intro",
      "   All about strings <strings>",
      "   datatypes",
      "```",
      "",
      "The second line above will link to the `strings` document, but will use the",
      "title \"All about strings\" instead of the title of the `strings` document.",
      "",
      "You can also add external links, by giving an HTTP URL instead of a document",
      "name.",
      "",
      "Section numbering",
      "",
      "If you want to have section numbers even in HTML output, give the",
      "toplevel toctree a `numbered` option.  For example:",
      "",
      "```",
      ".. toctree::",
      "   :numbered:",
      "",
      "   foo",
      "   bar",
      "```",
      "",
      "Numbering then starts at the heading of `foo`.  Sub-toctrees are",
      "automatically numbered (don't give the `numbered` flag to those).",
      "",
      "Numbering up to a specific depth is also possible, by giving the depth as a",
      "numeric argument to `numbered`.",
      "",
      "Additional options",
      "",
      "You can use the `caption` option to provide a toctree caption and you can",
      "use the `name` option to provide an implicit target name that can be",
      "referenced by using [ref](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-ref):",
      "",
      "```",
      ".. toctree::",
      "   :caption: Table of Contents",
      "   :name: mastertoc",
      "",
      "   foo",
      "```",
      "",
      "If you want only the titles of documents in the tree to show up, not other",
      "headings of the same level, you can use the `titlesonly` option:",
      "",
      "```",
      ".. toctree::",
      "   :titlesonly:",
      "",
      "   foo",
      "   bar",
      "```",
      "",
      "You can use \"globbing\" in toctree directives, by giving the `glob` flag",
      "option.  All entries are then matched against the list of available",
      "documents, and matches are inserted into the list alphabetically.  Example:",
      "",
      "```",
      ".. toctree::",
      "   :glob:",
      "",
      "   intro*",
      "   recipe/*",
      "   *",
      "```",
      "",
      "This includes first all documents whose names start with `intro`, then all",
      "documents in the `recipe` folder, then all remaining documents (except the",
      "one containing the directive, of course.) 2",
      "",
      "The special entry name `self` stands for the document containing the",
      "toctree directive.  This is useful if you want to generate a \"sitemap\" from",
      "the toctree.",
      "",
      "You can use the `reversed` flag option to reverse the order of the entries",
      "in the list. This can be useful when using the `glob` flag option to",
      "reverse the ordering of the files.  Example:",
      "",
      "```",
      ".. toctree::",
      "   :glob:",
      "   :reversed:",
      "",
      "   recipe/*",
      "```",
      "",
      "You can also give a \"hidden\" option to the directive, like this:",
      "",
      "```",
      ".. toctree::",
      "   :hidden:",
      "",
      "   doc_1",
      "   doc_2",
      "```",
      "",
      "This will still notify Sphinx of the document hierarchy, but not insert links",
      "into the document at the location of the directive -- this makes sense if you",
      "intend to insert these links yourself, in a different style, or in the HTML",
      "sidebar.",
      "",
      "In cases where you want to have only one top-level toctree and hide all other",
      "lower level toctrees you can add the \"includehidden\" option to the top-level",
      "toctree entry:",
      "",
      "```",
      ".. toctree::",
      "   :includehidden:",
      "",
      "   doc_1",
      "   doc_2",
      "```",
      "",
      "All other toctree entries can then be eliminated by the \"hidden\" option.",
      "",
      "In the end, all documents in the [source directory](https://www.sphinx-doc.org/en/master/glossary.html#term-source-directory) (or subdirectories)",
      "must occur in some `toctree` directive; Sphinx will emit a warning if it",
      "finds a file that is not included, because that means that this file will not",
      "be reachable through standard navigation.",
      "",
      "Use [exclude_patterns](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-exclude_patterns) to explicitly exclude documents or",
      "directories from building completely.  Use [the \"orphan\" metadata",
      "](https://www.sphinx-doc.org/en/master/usage/restructuredtext/field-lists.html#metadata) to let a document be built, but notify Sphinx that it is not",
      "reachable via a toctree.",
      "",
      "The \"root document\" (selected by [root_doc](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-root_doc)) is the \"root\" of the TOC",
      "tree hierarchy.  It can be used as the documentation's main page, or as a",
      "\"full table of contents\" if you don't give a `maxdepth` option."
    ],
    "options": {}
  },
  "versionadded(sphinx.domains.changeset.VersionChange)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-versionadded",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "versionadded",
    "is_markdown": true,
    "description": [
      "This directive documents the version of the project which added the described",
      "feature to the library or C API. When this applies to an entire module, it",
      "should be placed at the top of the module section before any prose.",
      "",
      "The first argument must be given and is the version in question; you can add",
      "a second argument consisting of a brief explanation of the change.",
      "",
      "Example:",
      "",
      "```",
      ".. versionadded:: 2.5",
      "   The *spam* parameter.",
      "```",
      "",
      "Note that there must be no blank line between the directive head and the",
      "explanation; this is to make these blocks visually continuous in the markup."
    ],
    "options": {}
  },
  "versionchanged(sphinx.domains.changeset.VersionChange)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-versionchanged",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "versionchanged",
    "is_markdown": true,
    "description": [
      "Similar to [versionadded](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-versionadded), but describes when and what changed in",
      "the named feature in some way (new parameters, changed side effects, etc.)."
    ],
    "options": {}
  },
  "warning(docutils.parsers.rst.directives.admonitions.Warning)": {
    "source": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-warning",
    "license": "https://github.com/sphinx-doc/sphinx/blob/4.x/LICENSE",
    "name": "warning",
    "is_markdown": true,
    "description": [
      "An important bit of information about an API that a user should be very aware",
      "of when using whatever bit of API the warning pertains to.  The content of",
      "the directive should be written in complete sentences and include all",
      "appropriate punctuation. This differs from [note](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-note) in that it is",
      "recommended over [note](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-note) for information regarding security."
    ],
    "options": {}
  }
}
